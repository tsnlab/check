name: Lint all

on:
  workflow_call:
    inputs:
      python_version:
        description: 'Python version'
        default: '3.12'
      rust_version:
        description: 'Rust version'
        default: 'stable'

jobs:
  lint-basic:
    runs-on: ubuntu-latest
    steps:
      - name: Shellcheck
        uses: ludeeus/action-shellcheck@master
      - name: Final newline
        uses: Logerfo/newline-action@0.0.4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          config-path: .github/newline.yml

  lint-c:
    runs-on: ubuntu-latest
    if: ${{ hashFiles('*.c') != '' }} || ${{ hashFiles('Makefile') != '' }}
    steps:
      - name: Install clang-format
        run: sudo apt install -qqy --no-install-recommends clang-format
      - name: Linters
        uses: wearerequired/lint-action@v2
        with:
          clang_format: true

  lint-python:
    runs-on: ubuntu-latest
    if: ${{ hashFiles('pyproject.toml') != '' }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ github.event.inputs.python_version }}
      - name: Install Flake8, pyright, mypy
        run: pip install flake8 flake8-import-order flake8-builtins pyright mypy
      - name: Install dependencies
        run: pip install .
      - name: flake8, mypy
        uses: wearerequired/lint-action@v2
        with:
          flake8: true
          mypy: true
          mypy_args: --disable-error-code=import-untyped --check-untyped-defs
      - name: Pyright
        uses: jakebailey/pyright-action@v2
        with:
          warnings: true

  lint-rust:
    runs-on: ubuntu-latest
    if: ${{ hashFiles('Cargo.toml') != '' }}
    steps:
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ github.event.inputs.rust_version }}
          components: clippy, rustfmt
      - name: Cargo fmt
        uses: actions-rust-lang/rustfmt@v1
      - name: Cargo clippy
        uses: giraffate/clippy-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
